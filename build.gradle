plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    // rest docs (1)
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
// jacoco (1)
    id 'jacoco'
}

group = 'com.carrot_auction_PJ'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // rest docs(2)
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // rest docs(3)
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:{project-version}'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

// rest docs(4)
ext {
    snippetsDir = file('build/generated-snippets')
}
// rest docs(5)
test {
    outputs.dir snippetsDir
}
// rest docs(6)
asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}
// rest docs(7)
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

// jacoco (2)
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
// jacoco(3)
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
// jacoco(4)
jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
// jacoco(5)
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// jacoco(6)
jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = false
            element = 'CLASS'
//            includes = []

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                maximum = 0.90
            }
            // 제외 파일 설정 가능
            excludes = []
        }
    }
}

// jacoco(7)
test {
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}